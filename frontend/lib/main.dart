import 'package:firebase_core/firebase_core.dart';
import 'package:flutter/material.dart';
import 'package:firebase_auth/firebase_auth.dart' hide EmailAuthProvider;
import 'package:firebase_ui_auth/firebase_ui_auth.dart';

import 'package:flutter/foundation.dart' show kIsWeb;

// Use the new, modular package for Google Sign-In
import 'package:firebase_ui_oauth_google/firebase_ui_oauth_google.dart'; 

// Import your generated firebase_options.dart file
import 'firebase_options.dart';

/// The main entry point of the Flutter application.
/// It initializes Firebase and runs the root widget, MyApp.
void main() async {
  // Ensure that Flutter is ready before initializing Firebase.
  WidgetsFlutterBinding.ensureInitialized();
  
  // Initialize Firebase with the options generated by flutterfire.
  await Firebase.initializeApp(
    options: DefaultFirebaseOptions.currentPlatform,
  );
  
  // Run the application with the MyApp widget.
  runApp(const MyApp());
}

/// The root widget of the application.
///
/// It uses a [StreamBuilder] to listen for changes in the user's
/// authentication state and conditionally displays either the [HomeScreen]
/// (if a user is signed in) or a [SignInScreen] (if no user is signed in).
class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      // The StreamBuilder listens for changes in the authentication state.
      home: StreamBuilder<User?>(
        stream: FirebaseAuth.instance.authStateChanges(),
        builder: (context, snapshot) {
          // If the user is signed in, show the HomeScreen.
          if (snapshot.hasData) {
            return const HomeScreen();
          }

          // Otherwise, show the built-in FirebaseUI SignInScreen.
          // This screen handles all the sign-in logic for you.
          return SignInScreen(
            providers: [
              // Use EmailAuthProvider for email/password sign-in.
              EmailAuthProvider(),
              // Use GoogleProvider for Google Sign-In.
              //clientId: kIsWeb ? DefaultFirebaseOptions.webClientId : DefaultFirebaseOptions.ios.iosClientId!),
              //GoogleProvider(clientId: DefaultFirebaseOptions.web.iosClientId),
              GoogleProvider(
                clientId: kIsWeb
                    ? DefaultFirebaseOptions.ios.iosClientId!
                    : DefaultFirebaseOptions.ios.iosClientId!,
              ),
            ],
          );
        },
      ),
    );
  }
}

/// A simple home screen that is displayed when a user is signed in.
///
/// It contains a basic title and a button in the app bar to log the user out.
class HomeScreen extends StatelessWidget {
  const HomeScreen({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Home Screen'),
        actions: [
          IconButton(
            // Sign out the user when the button is pressed.
            onPressed: () {
              FirebaseAuth.instance.signOut();
            },
            icon: const Icon(Icons.logout),
          ),
        ],
      ),
      body: const Center(
        child: Text('Welcome! You are signed in.'),
      ),
    );
  }
}